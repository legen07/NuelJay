import f from"fs";import n from"path";import{asInputFormats as g,defaultCompressionOptions as b,getCompressionOptions as y,getImageFormatsInFolder as O,logMessage as e}from"./utils.js";import{copyFile as w,mkdir as x}from"node:fs/promises";import{Glob as v}from"glob";import{lstatSync as D}from"node:fs";import{encodeFileAsync as S}from"./encodeFileAsync.js";async function G(s){const{srcDir:r,distDir:a,compressionOptions:l}=s;if(r&&!f.existsSync(r))return new Promise(()=>{console.warn(`\u{1F383} Error! The specified source directory ${r} does not exist.`)});if(s.compressionOptions==null){e("\u{1F383} No compression options found. Using default compression options.");const t=O(r);s.compressionOptions=b(t)}const h=new v("**",{cwd:r,exclude:"**/node_modules/**,**/.git/**,**/.DS_Store"}),c=[],P={srcDir:r,distDir:a,cwd:process.cwd()};e(`\u{1F383} Converting images in ${r} to ${a} ... Please wait!`,!0);for await(const t of h){const u=n.parse(t),o={...P,...u,res:t,srcPath:n.join(process.cwd(),r,t),distPath:n.join(process.cwd(),a,u.dir)};if(D(o.srcPath)?.isDirectory()){const i=n.join(process.cwd(),a,t);if(f.existsSync(i)){e("\u{1F4C1} Folder already exists "+i,s.verbose);continue}else{e("\u{1F4C1} Folder created "+i,s.verbose),c.push(x(i).then(()=>({copy:!0,srcPath:o.srcPath,distPath:i})));continue}}const p={...y(o.ext.substring(1),l),compressor:s.compressionOptions[o.ext?.substring(1)]?.compressor??void 0,paths:o,options:s.options,verbose:s.verbose};if(p.compressor!==void 0&&g(p.paths.ext.substring(1))){c.push(S(p));continue}const m=n.join(o.distPath,o.base);e("This is not an image file or the compression is not enabled for "+o.ext,s.verbose),e(`\u{1F4C4} Copying ${o.srcPath} file to ${m}`,s.verbose),c.push(w(o.srcPath,m).then(()=>({copy:!0,srcPath:o.srcPath,distPath:m})))}const d=await Promise.allSettled(c);d.length?d.forEach(t=>{t.status!=="fulfilled"?e("\u{1F534} "+t.reason,!0):e("\u2705 "+JSON.stringify(t.value),s.verbose)}):e("\u{1F534} No files found",!0)}export{G as convertImages};
